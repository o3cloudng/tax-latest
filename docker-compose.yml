services:

  # nginx:
  #   restart: always
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - app_network
  #   volumes:
  #     - static_volume:/home/app/static
  #     - media_volume:/home/app/media
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #     - certbot-etc:/etc/letsencrypt
  #     - certbot-var:/var/lib/letsencrypt
  #   depends_on:
  #     - app

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot-etc:/etc/letsencrypt
  #     - certbot-var:/var/lib/letsencrypt
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   command: certonly --webroot --webroot-path=/var/lib/letsencrypt --email your-email@example.com --agree-tos --no-eff-email -d yourdomain.com -d www.yourdomain.com

  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    # command: gunicorn core.wsgi --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/tax-latest/staticfiles
      - media_volume:/home/tax-latest/media
    expose:
      - 8000
    env_file:
      - /opt/tax-latest/.env
    depends_on:
      - db
    networks:
      - app_network
    container_name: app

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    
  celery-worker:
    build: .
    container_name: celery-worker
    command: celery -A core worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      # - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - .:/app
    networks:
      - app_network
    depends_on:
      - redis
      - db
      - app
      # redis:
      #   condition: service_healthy
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      # dockerfile: Dockerfile.prod
    command: celery -A core beat -l info
    volumes:
      - .:/app
    env_file:
      - ./.env
    networks:
      - app_network
    depends_on:
      - db
      - redis
      - app
    container_name: beat

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: "celery -A core flower --broker=redis://redis:6379/0 --env-files=./env --basic_auth=admin:1Million"
    ports:
      - 5555:5555
    env_file:
      - ./.env
    depends_on:
      - db
      - app
      - redis
      - celery-worker
    networks:
      - app_network
    container_name: flower

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:
  # certbot-etc:
  # certbot-var:

networks:
  app_network:
    driver: bridge
